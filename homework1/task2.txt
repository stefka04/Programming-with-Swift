import Foundation

func evaluate(expression: inout String) -> Double {
  if let res = Double(expression) {
    return res
  }
  var index:Int = 0
  var count:Int = 0
  expression.removeFirst()
  expression.removeLast()
  for current in expression {
    if current == "(" {
      count += 1      
    } else if current == ")" {
      count -= 1
    } else if count == 0 && !current.isNumber && !current.isWhitespace {
      var left: String =  String(expression.prefix(index - 1)) 
      let leftEvaluated: Double = evaluate(expression: &left)
      var right: String = String( expression.substring(from: index + 2))       
      let rightEvaluated: Double = evaluate(expression: &right)
      
      switch current {
      case "^" : return pow(leftEvaluated, rightEvaluated)
      case "+" : return leftEvaluated + rightEvaluated
      case "-" : return leftEvaluated - rightEvaluated
      case "*" : return leftEvaluated * rightEvaluated
      case "/" : return leftEvaluated / rightEvaluated
      default: return 0.0  
     }
    }
    index += 1
  }
  return 0.0
}


var a: String = "((20 + 10) * 3)"
var b: String = "((23 + 6) * 2)"

print(evaluate(expression: &a)) //90.0
print(evaluate(expression: &b)) // 58.0

var c: String = "((23 / 2) * 2)" //23.0
print(evaluate(expression: &c))

var d: String = "((20 / 10) * (4 ^ 1))" // 8.0
print(evaluate(expression: &d))

var e: String = "(((15 / 2) - 1) * (4 ^ 1))" // 26.0
print(evaluate(expression: &e))

var f: String = "(((15 / 2) - 1) * ((4 ^ 1) + (10 / 5)))" // 39.0
print(evaluate(expression: &f))